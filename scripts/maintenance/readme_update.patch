diff --git a/README.md b/README.md
index 6e706a4..1cedd04 100644
--- a/README.md
+++ b/README.md
@@ -1,196 +1,289 @@
 # RiftLine
 
-> A cross-platform game ecosystem that bridges real-time gameplay, companion experiences, and on-chain economies.
+> A unified, cross-platform game ecosystem developed by **KlusterTech, Inc.** that merges a high-fidelity Unreal Engine 5 experie
+nce, a connected mobile companion, service-oriented backend systems, and on-chain economies.
+>
+> **Proprietary Notice** – This repository is confidential KlusterTech property. Access is restricted to approved contributors u
+nder active NDA agreements. See [KlusterTech Proprietary Notice](docs/legal/PROPRIETARY_NOTICE.md) and [Contributor Access & Com
+pliance Policy](docs/compliance/CONTRIBUTOR_ACCESS_POLICY.md).
 
 ## Table of Contents
 
-1. [Overview](#overview)
-2. [Architecture Highlights](#architecture-highlights)
-3. [Monorepo Layout](#monorepo-layout)
-4. [Core Components](#core-components)
+1. [Executive Summary](#executive-summary)
+2. [Strategic Pillars](#strategic-pillars)
+3. [Repository Layout](#repository-layout)
+4. [Platform Architecture](#platform-architecture)
    - [Game Clients](#game-clients)
-   - [Backend Services](#backend-services)
+   - [Backend & Real-time Services](#backend--real-time-services)
+   - [Data Platform](#data-platform)
    - [Web3 & Smart Contracts](#web3--smart-contracts)
-   - [Infrastructure & Operations](#infrastructure--operations)
-   - [Documentation & Assets](#documentation--assets)
-5. [Getting Started](#getting-started)
+   - [Infrastructure & DevOps](#infrastructure--devops)
+5. [Tooling & Automation](#tooling--automation)
+6. [Environment Setup](#environment-setup)
    - [Prerequisites](#prerequisites)
    - [Clone the Repository](#clone-the-repository)
-   - [Bootstrapping the Local Stack](#bootstrapping-the-local-stack)
-   - [Smart Contract Workflow](#smart-contract-workflow)
-   - [Web3 Configuration](#web3-configuration)
-6. [Development Workflows](#development-workflows)
-7. [Documentation](#documentation)
-8. [Contributing](#contributing)
-9. [License](#license)
-10. [Project Roadmap](#project-roadmap)
-
-## Overview
-
-RiftLine is an ambitious, end-to-end game platform that combines a high-fidelity Unreal Engine 5 title, a connected mobile companion application, multiplayer services, and Web3-enabled economies. This monorepo acts as the single source of truth for game code, supporting services, operational tooling, and business documentation, enabling tightly aligned iteration across the ecosystem.
-
-## Architecture Highlights
-
-- **Cross-platform experiences** – A UE5 game client and a native companion application share assets, progression data, and event hooks.
-- **Service-oriented backend** – API gateway, Nakama authoritative game services, and dedicated microservices coordinate gameplay, player data, notifications, and analytics pipelines.
-- **On-chain integration** – Smart contracts, paymaster infrastructure, and Thirdweb engine components enable tokenized assets, seamless wallet flows, and gas abstractions.
-- **Infrastructure as code** – Docker, Kubernetes, and Terraform definitions provide reproducible environments from local development to production.
-- **Holistic documentation** – Tokenomics, legal, compliance, and operational playbooks live alongside source code to streamline cross-functional collaboration.
-
-## Monorepo Layout
-
-| Path | Description |
-| ---- | ----------- |
-| `apps/engine-ue5/` | Unreal Engine 5 project (`Riftline.uproject`) with source, config, plugin, and content roots for the flagship game client. |
-| `apps/companion-app/` | Companion mobile application scaffold with Android/iOS native shells, shared assets, and test harnesses. |
-| `backend/api-gateway/` | TypeScript gateway service scaffold including configuration for RiftLine token metadata. |
-| `backend/nakama/` | Nakama real-time server configuration, TypeScript module stubs, and migration directories. |
-| `backend/services/` | Placeholder microservices (indexer, notifications, webhooks) for extending backend capabilities. |
-| `backend/db/` | Database schemas, migrations, and seeding scaffolding. |
-| `backend/web3/` | Paymaster and Thirdweb engine environment templates for blockchain connectivity. |
-| `contracts/hardhat/` | Hardhat workspace for Solidity contracts targeting compiler version 0.8.23. |
-| `contracts/foundry/` | Foundry scaffolding for fast Solidity development and testing. |
-| `infra/docker/` | Local Docker Compose stack and container templates for core services (PostgreSQL, Redis, Nakama, and more). |
-| `infra/k8s/` | Base manifests and environment overlays for Kubernetes deployments. |
-| `infra/terraform/` | Infrastructure provisioning stubs for cloud environments. |
-| `scripts/` | Automation for development, database operations, deployments, and workstation setup. |
-| `docs/` | Cross-domain documentation covering tokenomics, architecture, operations, and compliance. |
-| `assets/` | Centralized art, UI, font, and legal asset placeholders shared across clients. |
-
-## Core Components
+   - [Bootstrapping Core Services](#bootstrapping-core-services)
+   - [Working with Unreal Engine](#working-with-unreal-engine)
+   - [Mobile Companion Bootstrapping](#mobile-companion-bootstrapping)
+   - [Smart Contract Development](#smart-contract-development)
+   - [Web3 Secrets & Wallets](#web3-secrets--wallets)
+7. [Documentation & Knowledge Base](#documentation--knowledge-base)
+8. [Security, Compliance & Access Control](#security-compliance--access-control)
+9. [Roadmap & Next Steps](#roadmap--next-steps)
+10. [Support & Communication](#support--communication)
+11. [Appendix: README Patch Automation](#appendix-readme-patch-automation)
+
+## Executive Summary
+
+RiftLine is the flagship KlusterTech gaming initiative designed to bridge premium gameplay with persistent digital economies and
+ second-screen participation. The monorepo centralizes every layer required to ship and operate the ecosystem: client applicati
+ons, gameplay services, blockchain integrations, infrastructure-as-code, documentation, and operational tooling. Consolidating t
+hese assets ensures tightly orchestrated delivery across engineering, creative, operations, and compliance teams.
+
+The current codebase provides a robust scaffold with intentional placeholders (`.gitkeep` markers) for major system verticals. T
+hese structures allow teams to collaborate without merge contention while incrementally introducing production-grade components.
+
+## Strategic Pillars
+
+- **Immersive Core Gameplay** – Unreal Engine 5 project (`apps/engine-ue5/`) anchors the player experience with cinematic visual
+s and responsive combat loops.
+- **Connected Companion Experience** – Native mobile shells (`apps/companion-app/`) support social touchpoints, inventory managem
+ent, and wallet flows synchronized with the core game.
+- **Service-driven Architecture** – Backend services leverage a modular stack (API gateway, Nakama authoritative services, domai
+n microservices) to deliver low-latency multiplayer and live operations.
+- **Web3-enabled Economies** – Hardhat and Foundry workspaces, along with paymaster and Thirdweb scaffolding, provide a pathway f
+or tokenized assets, gas abstraction, and wallet interoperability.
+- **Operational Excellence** – Docker, Kubernetes, Terraform, and CI/CD placeholders codify infrastructure strategy from local d
+ev to production while preserving compliance traceability.
+- **Confidential Collaboration** – Proprietary policies, onboarding workflows, and documentation guardrails ensure the project r
+emains secure and aligned with KlusterTech governance standards.
+
+## Repository Layout
+
+| Path | Purpose |
+| ---- | ------- |
+| `apps/engine-ue5/` | Unreal Engine 5 project root containing `Riftline.uproject`, configuration templates, and staged directori
+es for source, plugins, and content. |
+| `apps/companion-app/` | Mobile companion scaffolding with platform-specific shells (`android/`, `ios/`), shared assets, and tes
+t harness placeholders. |
+| `backend/api-gateway/` | TypeScript gateway service blueprint with `package.json`/`tsconfig.json` and reserved folders for src,
+ tests, and logging. |
+| `backend/nakama/` | Nakama configuration (`config/nakama.yml`), module placeholders, and migration directories for real-time g
+ameplay logic. |
+| `backend/services/` | Domain microservice stubs (indexer, notifications, webhooks) to support specialized workloads and extens
+ions. |
+| `backend/db/` | Schema, migration, and seed directories establishing the data platform's versioning strategy. |
+| `backend/web3/` | Environment templates for paymaster, bundler, and Thirdweb engine integrations aligned to the RiftLine token
+ (`RFT`). |
+| `contracts/hardhat/` | Hardhat workspace targeting Solidity `0.8.23` with scripts, tests, and dependency management. |
+| `contracts/foundry/` | Foundry scaffold (`src/`, `script/`, `test/`, `lib/`) for rapid Solidity prototyping and fuzzing. |
+| `infra/docker/` | Docker Compose stack and container templates powering local development environments. |
+| `infra/k8s/` | Base manifests and environment overlays (`dev/`, `staging/`, `prod/`) for Kubernetes deployments. |
+| `infra/terraform/` | Terraform module and environment stubs for provisioning cloud infrastructure. |
+| `infra/ci/` | Reserved directories for GitHub and GitLab automation pipelines. |
+| `scripts/` | Operational scripts for development workflows, database operations, deployments, and workstation setup. |
+| `docs/` | Knowledge base covering tokenomics, architecture, API, mobile, engine, legal, compliance, and operations guidance. |
+| `assets/` | Centralized repository of creative, UI, font, icon, and legal placeholders shared across products. |
+| `pnpm-workspace.yaml` | Placeholder for future pnpm workspace orchestration across services and clients. |
+
+## Platform Architecture
 
 ### Game Clients
 
-- **Unreal Engine 5 Game (`apps/engine-ue5/`)** – Contains the `Riftline.uproject` file, configuration directories, and content roots expected by UE5. Designers and engineers can collaborate on gameplay logic, Blueprints, and assets while keeping editor settings versioned.
-- **Mobile Companion (`apps/companion-app/`)** – Provides Android and iOS native containers, shared app assets, and a testing harness. The companion app is intended for social features, second-screen experiences, and wallet management that complement the primary game.
+- **Unreal Engine 5** – `apps/engine-ue5/` contains the authoritative UE5 project configuration with placeholders for `Config/`,
+ `Content/`, `Plugins/`, and `Source/`. Teams should extend these directories with gameplay code, Blueprints, assets, and editor
+ settings. Maintain deterministic builds by versioning project settings and documenting platform-specific requirements in `docs/
+engine/`.
+- **Companion Application** – `apps/companion-app/` organizes native shells for Android and iOS alongside shared `assets/`, `app/
+`, and `tests/` directories. The companion experience is designed for social interactions, inventory review, second-screen feat
+ures, and wallet management linked to the UE5 session lifecycle.
 
-### Backend Services
+### Backend & Real-time Services
 
-- **API Gateway (`backend/api-gateway/`)** – A TypeScript-based entry point for HTTP and WebSocket traffic. Token metadata is defined in `src/config/token.json`, and the `src` tree reserves space for controllers, routes, middleware, and schema validation.
-- **Authoritative Game Services (`backend/nakama/`)** – Houses Nakama server configuration (`config/nakama.yml`) and TypeScript module scaffolding for authentication, economy, match logic, RPC endpoints, and Web3 hooks.
-- **Domain Microservices (`backend/services/`)** – Organized for specialized workloads such as blockchain indexing, notification delivery, and webhook ingest. Each service directory ships with Git keepers, ready to be populated with frameworks that match its SLA.
-- **Data Platform (`backend/db/`)** – Schemas, migrations, and seed data live here so that the operational database is explicitly versioned and testable.
+- **API Gateway** – `backend/api-gateway/` will expose REST/WebSocket entry points, orchestrate authentication, and mediate betw
+een clients, Nakama, and domain services. Populate `src/` with controllers, middleware, and schema validations as features solid
+ify.
+- **Nakama Runtime** – `backend/nakama/` houses authoritative match logic. The `config/nakama.yml` stub already points to a JavaS
+cript/TypeScript runtime output directory (`./modules/ts/build`). Use this area to author authentication hooks, economy systems,
+ match loops, and RPC endpoints.
+- **Domain Services** – `backend/services/` collects specialized workloads such as blockchain indexers, notification dispatchers,
+ and webhook processors. Each service directory begins with `.gitkeep` placeholders so teams can select appropriate frameworks a
+nd SLAs without structural churn.
 
-### Web3 & Smart Contracts
-
-- **Smart Contracts (`contracts/hardhat/`)** – Hardhat is preconfigured for Solidity `0.8.23`, references an upcoming `./contracts/weapons` source tree, and exposes `npm run compile`/`npm run test` commands for iterative development.
-- **Alternative Tooling (`contracts/foundry/`)** – Includes canonical `src/`, `lib/`, and `test/` folders for teams preferring Foundry-based workflows.
-- **Gas Abstraction & Wallet Tooling (`backend/web3/`)** – `.env.example` files for the paymaster and Thirdweb engine define required secrets such as RPC URLs, private keys, Thirdweb tokens, and chain IDs, enabling gasless or subsidized transactions.
-
-### Infrastructure & Operations
+### Data Platform
 
-- **Local Stack (`infra/docker/`)** – `docker-compose.local.yml` bootstraps PostgreSQL and Redis containers, forming the foundation for a local services mesh. Additional directories reserve configurations for Nakama, bundlers, engines, and supporting infrastructure.
-- **Kubernetes (`infra/k8s/`)** – Base manifests (namespace, ingress, config map, secrets) and environment overlays (`dev`, `staging`, `prod`) standardize cluster deployments while remaining customizable per environment.
-- **Terraform (`infra/terraform/`)** – Serves as the placeholder for infrastructure-as-code modules that define cloud networking, compute, and managed services aligned with RiftLine.
-- **Continuous Integration (`infra/ci/`)** – GitHub and GitLab directories allow teams to codify pipelines for build, test, and deployment automation.
+The `backend/db/` directory provides canonical locations for migrations (`migrations/`), schema definitions (`schemas/`), and se
+d data (`seed/`). Align database changes with application code through versioned migration scripts and use the automation hook i
+n `scripts/db/` to codify repeatable operations (e.g., `migrate.sh`).
 
-### Documentation & Assets
-
-- **Tokenomics (`docs/tokenomics/`)** – Captures economic models, allocation plans, vesting schedules, and a high-level overview of the RiftLine token (RFT).
-- **Cross-functional Docs (`docs/`)** – Stub folders for architecture, API, mobile, engine, legal, compliance, and operations encourage collaborative documentation.
-- **Shared Assets (`assets/`)** – Organized repositories for UI kits, iconography, fonts, legal documents, and placeholder media shared between clients, marketing, and operations.
+### Web3 & Smart Contracts
 
-## Getting Started
+- **Hardhat Workspace** – `contracts/hardhat/` is configured for Solidity `0.8.23` with OpenZeppelin dependencies and a default s
+ource path of `./contracts/weapons`. Use `npm run compile` and `npm run test` to iterate locally.
+- **Foundry Workspace** – `contracts/foundry/` mirrors Foundry conventions for fast prototyping and fuzz testing. Populate `foun
+ndry.toml` and `remappings.txt` as modules mature.
+- **Execution Infrastructure** – `backend/web3/` includes `.env.example` templates for the paymaster, bundler, and Thirdweb engin
+e services. These templates define required secrets such as RPC URLs, private keys, and chain identifiers for RiftLine's RFT tok
+en operations.
+
+### Infrastructure & DevOps
+
+- **Local Orchestration** – `infra/docker/docker-compose.local.yml` provisions PostgreSQL and Redis containers and serves as the
+foundation for a richer local stack (Nakama, API gateway, Web3 services). Extend the Compose file as services graduate into acti
+ve development.
+- **Kubernetes Blueprints** – `infra/k8s/` offers base manifests (`namespace.yaml`, `ingress.yaml`, `configmap.yaml`, `secret-exa
+mple.yaml`) and environment overlays that will anchor cluster deployments across dev, staging, and production.
+- **Terraform Scaffolding** – `infra/terraform/` organizes infrastructure-as-code modules and environment states to codify cloud
+ network, compute, and managed services.
+- **CI/CD Foundations** – `infra/ci/github/` and `infra/ci/gitlab/` directories reserve space for pipeline definitions covering b
+uilds, tests, security scanning, and deployment automation.
+
+## Tooling & Automation
+
+- **Development Scripts** – `scripts/dev/start.sh` and `scripts/dev/stop.sh` wrap Docker Compose invocations to consistently boo
+tstrap or teardown the local services stack.
+- **Database Utilities** – `scripts/db/` is the staging area for migration and seeding automation. Expand `migrate.sh` to encapsu
+late your preferred migration toolchain.
+- **Deployment Hooks** – `scripts/deploy/local.sh` will evolve into a deployment helper once service promotion workflows are esta
+blished.
+- **Workstation Setup** – `scripts/ops/wsl-setup.sh` is reserved for Windows Subsystem for Linux onboarding tasks and can be expa
+nded with environment hardening steps.
+
+## Environment Setup
 
 ### Prerequisites
 
-- [Git](https://git-scm.com/) for source control.
-- [Node.js](https://nodejs.org/) 18+ and [npm](https://www.npmjs.com/) for TypeScript services and Hardhat tooling.
-- [Docker Desktop](https://www.docker.com/products/docker-desktop/) with Compose v2 for local infrastructure.
-- [pnpm](https://pnpm.io/) (optional) if you prefer managing packages across workspaces.
-- Unreal Engine 5, Android/iOS SDKs, and platform-specific dependencies for client development (installed separately).
+- [Git](https://git-scm.com/) for source control and patch management.
+- [Node.js 18+](https://nodejs.org/) and [npm](https://www.npmjs.com/) for TypeScript services and Hardhat tooling. [pnpm](https
+://pnpm.io/) is optional for monorepo package management once workspaces are defined.
+- [Docker Desktop](https://www.docker.com/products/docker-desktop/) with Compose v2 for local service orchestration.
+- Unreal Engine 5.x with the necessary platform SDKs for Windows/macOS development.
+- Native Android/iOS toolchains (Android Studio, Xcode) for companion application builds.
+- Access to KlusterTech-managed secrets vaults or secure credential stores for Web3 services.
 
 ### Clone the Repository
 
 ```bash
-git clone https://github.com/<your-org>/RiftLine.git
+git clone ssh://<your-klustertech-host>/RiftLine.git
 cd RiftLine
 ```
 
-### Bootstrapping the Local Stack
+Ensure you are operating within the KlusterTech-managed Git hosting environment. Public mirrors and forks are prohibited.
 
-1. Ensure Docker Desktop is running.
-2. Start core services (PostgreSQL, Redis, and future containers) with the helper script:
+### Bootstrapping Core Services
 
+1. Confirm Docker Desktop (or your preferred container runtime) is running.
+2. Start the local infrastructure baseline:
    ```bash
    ./scripts/dev/start.sh
    ```
-
-3. When you are done, gracefully stop the stack:
-
+   This command runs `docker compose -f infra/docker/docker-compose.local.yml up -d`, provisioning PostgreSQL and Redis.
+3. When you finish your session, stop the stack to conserve resources:
    ```bash
    ./scripts/dev/stop.sh
    ```
+4. Extend the Compose file with additional services (e.g., Nakama, API gateway) as functionality comes online.
 
-The script executes `docker compose -f infra/docker/docker-compose.local.yml up -d`, so you can customize the Compose file to introduce Nakama, API gateway, or other services as they come online.
-
-### Smart Contract Workflow
-
-1. Install dependencies inside the Hardhat workspace:
-
-   ```bash
-   cd contracts/hardhat
-   npm install
-   ```
+### Working with Unreal Engine
 
-2. Compile Solidity sources (currently targeting `./contracts/weapons`):
+- Open `apps/engine-ue5/Riftline.uproject` using the approved Unreal Engine build.
+- Configure platform-specific settings (input, rendering, packaging) within the `Config/` directory and commit deterministic chan
+ge sets.
+- Coordinate binary asset versioning using Git LFS if large media files are introduced. Consult `docs/engine/` for team norms whe
+n populated.
 
-   ```bash
-   npm run compile
-   ```
+### Mobile Companion Bootstrapping
 
-3. Execute the unit test suite:
+- The `apps/companion-app/` directory contains `.gitkeep` placeholders for Android (`android/`), iOS (`ios/`), shared `app/`, `a
+ssets/`, and `tests/` trees. Introduce your framework of choice (e.g., React Native, Kotlin Multiplatform, Swift) while maintain
+ing consistent project structure.
+- Document build steps, dependency managers, and integration tests under `docs/mobile/` as they are established.
 
-   ```bash
-   npm run test
-   ```
+### Smart Contract Development
 
-4. Use the Foundry scaffold (`contracts/foundry/`) when rapid Solidity prototyping or fuzzing is required.
+```bash
+cd contracts/hardhat
+npm install
+npm run compile
+npm run test
+```
 
-### Web3 Configuration
+Use the Foundry scaffold (`contracts/foundry/`) when you need fast Solidity prototyping or fuzz testing. Keep deployment scripts,
+ ABI outputs, and audits versioned within their respective directories.
 
-1. Duplicate the environment templates:
+### Web3 Secrets & Wallets
 
+1. Copy environment templates before populating secrets:
    ```bash
    cp backend/web3/paymaster/.env.example backend/web3/paymaster/.env
+   cp backend/web3/bundler/.env.example backend/web3/bundler/.env
    cp backend/web3/thirdweb-engine/.env.example backend/web3/thirdweb-engine/.env
    ```
+2. Populate values such as `RPC_URL`, `PAYMASTER_PRIVATE_KEY`, `ENTRYPOINT_ADDR`, `BUNDLER_PRIVATE_KEY`, `THIRDWEB_SECRET_KEY`,
+ and `CHAIN_ID` according to the network you are targeting.
+3. Store populated `.env` files in approved secret management solutions. Never commit secrets or distribute them over unauthorize
+d channels.
+
+## Documentation & Knowledge Base
+
+The `docs/` directory is the canonical knowledge repository. Key areas include:
 
-2. Populate secrets such as `RPC_URL`, `PAYMASTER_PRIVATE_KEY`, `THIRDWEB_SECRET_KEY`, and `CHAIN_ID` with values appropriate for your target network.
-3. Never commit populated `.env` files to source control. Use your preferred secret management solution for shared environments.
+- `docs/tokenomics/` – Token overview (`README.md`) and placeholders for allocation modeling, vesting schedules, and economy sim
+ulations.
+- `docs/architecture/`, `docs/api/`, `docs/engine/`, `docs/mobile/`, `docs/contracts/`, `docs/ops/` – Domain-specific folders fo
+r technical designs, runbooks, and playbooks.
+- `docs/legal/` – Home to the [KlusterTech Proprietary Notice](docs/legal/PROPRIETARY_NOTICE.md) and future legal guidance (e.g.
+, licensing terms, partner agreements).
+- `docs/compliance/` – Contains the [Contributor Access & Compliance Policy](docs/compliance/CONTRIBUTOR_ACCESS_POLICY.md) and w
+ill expand to include security, privacy, and audit documentation.
 
-## Development Workflows
+Keep documentation synchronized with implementation progress. Every feature, service, or workflow should be reflected in the kno
+wledge base to support rapid onboarding and audit readiness.
 
-- **API Gateway** – Extend controllers, routes, and middleware under `backend/api-gateway/src/`. Add schemas for request/response validation and implement service adapters that integrate with Nakama, the database, or blockchain indexers.
-- **Nakama Modules** – Author game logic, match handlers, and RPC endpoints within `backend/nakama/modules/ts/src/`. Follow the existing folder taxonomy (`auth`, `economy`, `match`, `rpc`, `web3`) for clean separation of concerns.
-- **Database Migrations** – Add migration scripts to `backend/db/migrations/` and version your schema changes alongside code updates.
-- **Automation Scripts** – Extend the shell utilities in `scripts/` to standardize operational tasks such as database resets, local deployments, or analytics backfills.
+## Security, Compliance & Access Control
 
-## Documentation
+- Access to this repository is limited to team members and partners approved by KlusterTech leadership.
+- Every contributor must review and comply with both the [Proprietary Notice](docs/legal/PROPRIETARY_NOTICE.md) and the [Contribu
+tor Access & Compliance Policy](docs/compliance/CONTRIBUTOR_ACCESS_POLICY.md) prior to committing code.
+- Secrets, credentials, and private keys must be managed through KlusterTech-sanctioned secret management systems.
+- Notify the security team immediately upon detecting suspicious activity, credential exposure, or device compromise.
+- External distribution, public discussions, or showcasing RiftLine materials outside authorized channels is strictly prohibited.
 
-Centralize specs, design decisions, and compliance artifacts under `docs/`. The tokenomics section already includes a brief overview (`README.md`) and placeholders for allocation, vesting, and economy modeling. Populate the other discipline-specific directories (architecture, API, engine, mobile, ops, legal, compliance) as you formalize processes and product decisions.
+## Roadmap & Next Steps
 
-## Contributing
+The repository currently provides a structural foundation. Upcoming milestones include:
 
-1. Create a feature branch that scopes your changes clearly.
-2. Follow the conventions implied by directory names and keep services decoupled.
-3. Update or add documentation under `docs/` whenever behavior changes.
-4. Include or update automated scripts/tests to validate your work.
-5. Submit a pull request with a concise summary, testing evidence, and any relevant diagrams or screenshots.
+1. **Gameplay & Content** – Implement core gameplay loops, progression systems, and content pipelines within `apps/engine-ue5/`.
+2. **Companion Experience** – Stand up mobile companion features, push notifications, and wallet UX across Android/iOS shells.
+3. **Service Implementations** – Build out API gateway routes, Nakama modules, and microservices for matchmaking, inventory, ana
+lytics, and live operations.
+4. **Data & Observability** – Introduce migration tooling, seed data, telemetry pipelines, and monitoring dashboards.
+5. **Web3 Integration** – Finalize smart contract deployments, paymaster flows, and wallet abstraction layers.
+6. **Infrastructure Hardening** – Expand Docker, Kubernetes, Terraform, and CI/CD automation into fully managed environments wit
+h observability and incident response playbooks.
+7. **Compliance Maturity** – Populate legal, compliance, and operational documentation to meet internal audit and partner requir
+ements.
 
-## License
+Each milestone should be accompanied by updates to documentation, automation scripts, and testing coverage.
 
-License details are pending. Consult the `assets/legal/` directory or project leadership before distributing proprietary materials.
+## Support & Communication
 
-## Project Roadmap
+- Engage via KlusterTech's private collaboration channels (e.g., Slack, Teams) using organization-managed accounts.
+- For access requests or offboarding, coordinate with the project sponsor and follow the [Contributor Access & Compliance Policy
+](docs/compliance/CONTRIBUTOR_ACCESS_POLICY.md).
+- For legal or security inquiries, contact the KlusterTech legal/security steering group through approved escalation paths.
+- For build or operational issues, file tickets in the internal project management system referencing affected directories and se
+rvices.
 
-This repository is an evolving foundation. Many folders currently contain `.gitkeep` placeholders so teams can begin collaborating without structural conflicts. As vertical slices are implemented, expect:
+## Appendix: README Patch Automation
 
-- Expanded API gateway handlers and contract schemas.
-- Nakama match logic, progression systems, and economy services.
-- Fully defined Docker, Kubernetes, and Terraform configurations for each environment.
-- Production-ready companion app features, including wallet integration and push notifications.
-- Comprehensive documentation for compliance, legal, and operational readiness.
+To reapply this README update (e.g., when bootstrapping a new clone), use the helper script located at `scripts/maintenance/apply
+_readme_update.sh`. The script invokes `git apply` with the curated patch stored alongside it, ensuring the documentation stays s
+ync across environments.
 
-Contributions that push the platform toward these milestones are welcome.
+```bash
+./scripts/maintenance/apply_readme_update.sh
+```
 
+> The patch script is intended for controlled environments. Verify your working tree is clean before running it, and review the
+patch contents to confirm compatibility with your branch state.
diff --git a/docs/compliance/CONTRIBUTOR_ACCESS_POLICY.md b/docs/compliance/CONTRIBUTOR_ACCESS_POLICY.md
new file mode 100644
index 0000000..23d9079
--- /dev/null
+++ b/docs/compliance/CONTRIBUTOR_ACCESS_POLICY.md
@@ -0,0 +1,37 @@
+# Contributor Access & Compliance Policy
+
+This policy governs how individuals engage with the RiftLine codebase and related services. It supplements the contractual Non-Disclosure Agreements (NDAs) signed by each collaborator and is enforceable by KlusterTech, Inc.
+
+## Eligibility
+
+- Only contributors who have been vetted by KlusterTech leadership and have executed the latest NDA may access this repository.
+- Access is provisioned on a least-privilege basis. Contributors receive only the permissions required to fulfill their assigned responsibilities.
+- Contractors and vendors must designate a KlusterTech sponsor who is accountable for their work and policy adherence.
+
+## Onboarding Workflow
+
+1. **Pre-screening** – Candidates undergo background and capability verification.
+2. **NDA execution** – Legal agreements are signed before any assets or credentials are shared.
+3. **Access provisioning** – Repository, infrastructure, and communication platform access is issued by the DevOps and Security leads.
+4. **Orientation** – New contributors review the [KlusterTech Proprietary Notice](../legal/PROPRIETARY_NOTICE.md) and complete any role-specific training modules.
+
+No development activities may commence until all onboarding steps are confirmed by the sponsor.
+
+## Operational Expectations
+
+- Use organization-managed accounts and hardware whenever possible.
+- Keep local clones encrypted and separate from personal or open-source projects.
+- Follow commit hygiene: meaningful messages, scoped changes, and timely documentation updates.
+- Notify the security team before introducing new third-party dependencies, SaaS services, or data flows.
+- Report security incidents, suspicious behavior, or policy violations immediately using approved escalation channels.
+
+## Offboarding Workflow
+
+When a contributor's engagement ends or access needs change:
+
+1. The sponsor submits an access revocation request to DevOps and Security.
+2. Credentials, tokens, and hardware are decommissioned or returned.
+3. Local and cloud copies of proprietary data are securely destroyed, with confirmation sent to the sponsor.
+4. Outstanding work is transitioned following the project lead's handover plan.
+
+Compliance with these controls protects KlusterTech intellectual property and ensures RiftLine remains secure, resilient, and audit-ready.
diff --git a/docs/legal/PROPRIETARY_NOTICE.md b/docs/legal/PROPRIETARY_NOTICE.md
new file mode 100644
index 0000000..b78aeda
--- /dev/null
+++ b/docs/legal/PROPRIETARY_NOTICE.md
@@ -0,0 +1,40 @@
+# KlusterTech Proprietary Notice
+
+This repository and all of its contents are the confidential and proprietary property of **KlusterTech, Inc.** The software, assets, documentation, and operational knowledge contained herein are furnished exclusively for use by individuals who have executed a current Non-Disclosure Agreement (NDA) with KlusterTech and who have been explicitly authorized by the RiftLine leadership team.
+
+## Scope of Protection
+
+The following materials are considered confidential and proprietary, whether stored in this repository or transmitted in connection with it:
+
+- Source code, configuration, infrastructure definitions, and automation scripts.
+- Game assets, UI designs, audio, fonts, and supporting creative materials.
+- Smart contract code, Web3 integration artifacts, and blockchain operational playbooks.
+- Documentation spanning product strategy, tokenomics, operations, compliance, and legal guidance.
+- Roadmaps, analytics, telemetry, or business intelligence derived from or supporting the RiftLine platform.
+
+Any derivative works, modifications, or discussions referencing these materials inherit the same level of confidentiality.
+
+## Usage Restrictions
+
+Authorized contributors must adhere to the following directives:
+
+1. **Non-disclosure** – Do not share, transmit, or publish repository materials outside the approved collaboration channels defined by KlusterTech.
+2. **No external distribution** – Do not fork, clone, or mirror this repository into public or third-party systems without prior written approval from KlusterTech's legal team.
+3. **Device security** – Maintain industry-standard security controls on any device that stores or accesses repository contents, including full-disk encryption and up-to-date endpoint protection.
+4. **Third-party services** – Obtain explicit approval before integrating with or uploading content to any external SaaS, CI/CD, or analytics platform.
+5. **Return or destruction** – Upon request, or when authorization expires, promptly return or securely destroy local copies and derived artifacts.
+
+## NDA Obligations
+
+All collaborators are bound by the NDA they executed with KlusterTech. In addition to the contractual terms, please observe these operational guidelines:
+
+- Limit conversations regarding RiftLine to vetted, access-controlled communication channels.
+- Refrain from storing secrets, credentials, or design documents in personal cloud accounts or messaging applications.
+- Promptly report suspected data loss, breaches, or policy violations to KlusterTech security leadership.
+- Seek legal counsel or leadership guidance before referencing RiftLine in marketing materials, portfolios, or professional profiles.
+
+## Questions and Escalations
+
+For clarification on these obligations or to report a potential incident, contact the KlusterTech legal and security steering group through the established internal channels. Unauthorized disclosure or misuse may result in disciplinary action, contract termination, and legal remedies available to KlusterTech.
+
+All rights reserved. © KlusterTech, Inc.
